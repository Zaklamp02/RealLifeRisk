shiny::runApp('C:/Users/sebas/OneDrive/FIOD/POC_MultiFileSearch')
library(readxl)
d_main = 'C:/Users/sebas/Desktop/Analyse uren FIOD'
read_excel(fullfile(d_main,'D0_SAP.xlsx'))
read_excel(file.path(d_main,'D0_SAP.xlsx'))
file.path(d_main,'D0_SAP.xlsx')
shiny::runApp('C:/Users/sebas/OneDrive/FIOD/POC_MultiFileSearch')
runApp('C:/Users/sebas/OneDrive/FIOD/POC_MultiFileSearch')
runApp('C:/Users/sebas/OneDrive/FIOD/POC_MultiFileSearch')
runApp('C:/Users/sebas/OneDrive/FIOD/POC_MultiFileSearch')
runApp('C:/Users/sebas/OneDrive/FIOD/POC_MultiFileSearch')
runApp('C:/Users/sebas/OneDrive/FIOD/POC_MultiFileSearch')
runApp('C:/Users/sebas/OneDrive/FIOD/POC_MultiFileSearch')
?h3
runApp('C:/Users/sebas/OneDrive/FIOD/POC_MultiFileSearch')
runApp('C:/Users/sebas/OneDrive/FIOD/POC_MultiFileSearch')
runApp('C:/Users/sebas/OneDrive/FIOD/POC_MultiFileSearch')
runApp('C:/Users/sebas/OneDrive/FIOD/POC_MultiFileSearch')
?hr
runApp('C:/Users/sebas/OneDrive/FIOD/POC_MultiFileSearch')
runApp('C:/Users/sebas/OneDrive/FIOD/POC_MultiFileSearch')
runApp('C:/Users/sebas/OneDrive/FIOD/POC_MultiFileSearch')
runApp('C:/Users/sebas/OneDrive/FIOD/POC_MultiFileSearch')
runApp('C:/Users/sebas/OneDrive/FIOD/POC_MultiFileSearch')
runApp('C:/Users/sebas/OneDrive/FIOD/POC_MultiFileSearch')
runApp('C:/Users/sebas/OneDrive/FIOD/POC_MultiFileSearch')
runApp('C:/Users/sebas/OneDrive/FIOD/POC_MultiFileSearch')
runApp('C:/Users/sebas/OneDrive/FIOD/POC_MultiFileSearch')
runApp('C:/Users/sebas/OneDrive/FIOD/POC_MultiFileSearch')
runApp('C:/Users/sebas/OneDrive/FIOD/POC_MultiFileSearch')
shiny::runApp('C:/Users/sebas/OneDrive/FIOD/POC_MultiFileSearch')
runApp('C:/Users/sebas/OneDrive/FIOD/POC_MultiFileSearch')
shiny::runApp('C:/Users/sebas/OneDrive/FIOD/POC_MultiFileSearch')
runApp('C:/Users/sebas/OneDrive/FIOD/POC_MultiFileSearch')
runApp('C:/Users/sebas/OneDrive/FIOD/POC_MultiFileSearch')
runApp('C:/Users/sebas/OneDrive/FIOD/POC_MultiFileSearch')
runApp('C:/Users/sebas/OneDrive/FIOD/POC_MultiFileSearch')
runApp('C:/Users/sebas/OneDrive/FIOD/POC_MultiFileSearch')
runApp('C:/Users/sebas/OneDrive/FIOD/POC_MultiFileSearch')
runApp('C:/Users/sebas/OneDrive/FIOD/POC_MultiFileSearch')
runApp('C:/Users/sebas/OneDrive/FIOD/POC_MultiFileSearch')
runApp('C:/Users/sebas/OneDrive/FIOD/POC_MultiFileSearch')
runApp('C:/Users/sebas/OneDrive/FIOD/POC_MultiFileSearch')
runApp('C:/Users/sebas/OneDrive/FIOD/POC_MultiFileSearch')
runApp('C:/Users/sebas/OneDrive/FIOD/POC_MultiFileSearch')
runApp('C:/Users/sebas/OneDrive/FIOD/POC_MultiFileSearch')
runApp('C:/Users/sebas/OneDrive/FIOD/POC_MultiFileSearch')
runApp('C:/Users/sebas/OneDrive/FIOD/POC_MultiFileSearch')
runApp('C:/Users/sebas/OneDrive/FIOD/POC_MultiFileSearch')
shiny::runApp('C:/Users/sebas/OneDrive/FIOD/POC_MultiFileSearch')
runApp('C:/Users/sebas/OneDrive/FIOD/POC_MultiFileSearch')
runApp('C:/Users/sebas/OneDrive/FIOD/POC_MultiFileSearch')
runApp('C:/Users/sebas/OneDrive/FIOD/POC_MultiFileSearch')
runApp('C:/Users/sebas/OneDrive/FIOD/POC_MultiFileSearch')
runApp('C:/Users/sebas/OneDrive/FIOD/POC_MultiFileSearch')
runApp('C:/Users/sebas/OneDrive/FIOD/POC_MultiFileSearch')
runApp('C:/Users/sebas/OneDrive/FIOD/POC_MultiFileSearch')
runApp('C:/Users/sebas/OneDrive/FIOD/POC_MultiFileSearch')
runApp('C:/Users/sebas/OneDrive/FIOD/POC_MultiFileSearch')
getwd()
getwd()
install.packages("RQDA")
RQDA()
library(RQDA)
library(RQDA)
RQDA()
install.packages("RGtk2", depen=T)
install.packages("RGtk2", depen = T)
library(RGtk2)
library(RQDA)
install.packages("cairoDevice")
?install.packages
install.packages("cairoDevice",type="source")
library(RQDA)
install.package("RGtk2")
install.packages("RGtk2")
library(RGtk2)
shiny::runApp('C:/Users/sebas/Desktop/RealLifeRiskR/RealLifeRiskR/shiny')
runApp('C:/Users/sebas/Desktop/RealLifeRiskR/RealLifeRiskR/shiny')
runApp('C:/Users/sebas/Desktop/RealLifeRiskR/RealLifeRiskR/shiny')
runApp('C:/Users/sebas/Desktop/RealLifeRiskR/RealLifeRiskR/shiny')
runApp('C:/Users/sebas/Desktop/RealLifeRiskR/RealLifeRiskR/shiny')
?rasterImage
runApp('C:/Users/sebas/Desktop/RealLifeRiskR/RealLifeRiskR/shiny')
runApp('C:/Users/sebas/Desktop/RealLifeRiskR/RealLifeRiskR/shiny')
d
land
tland
View(playerDef)
i=2
land[,,1]  == playerDef$red[i]/255
which(land[,,1]  == playerDef$red[i]/255)
runApp('C:/Users/sebas/Desktop/RealLifeRiskR/RealLifeRiskR/shiny')
tbs
View(boardState)
boardState[boardState$player=='SPW'
]
boardState[boardState$player=='SPW',]
bs <- boardState
player="SPW"
tbs <- bs[bs$player==player,]
bs_player <- bs[bs$player==player,]
runApp('C:/Users/sebas/Desktop/RealLifeRiskR/RealLifeRiskR/shiny')
runApp('C:/Users/sebas/Desktop/RealLifeRiskR/RealLifeRiskR/shiny')
terrain
a <- parse_terrain(boardDef)
a
names(a)
a$city
tbs
which("E" %in% yNames)
which("E" %in% xNames)
"E" %in% xNames
xNames
which("E"==xNames)
which(tbs$xPos==xNames)
runApp('C:/Users/sebas/Desktop/RealLifeRiskR/RealLifeRiskR/shiny')
runApp('C:/Users/sebas/Desktop/RealLifeRiskR/RealLifeRiskR/shiny')
rep(floor(scrnRes[1]*0.73/gridSize[1]),2)
runApp('C:/Users/sebas/Desktop/RealLifeRiskR/RealLifeRiskR/shiny')
runApp('C:/Users/sebas/Desktop/RealLifeRiskR/RealLifeRiskR/shiny')
runApp('C:/Users/sebas/Desktop/RealLifeRiskR/RealLifeRiskR/shiny')
runApp('C:/Users/sebas/Desktop/RealLifeRiskR/RealLifeRiskR/shiny')
runApp('C:/Users/sebas/Desktop/RealLifeRiskR/RealLifeRiskR/shiny')
runApp('C:/Users/sebas/Desktop/RealLifeRiskR/RealLifeRiskR/shiny')
runApp('C:/Users/sebas/Desktop/RealLifeRiskR/RealLifeRiskR/shiny')
runApp('C:/Users/sebas/Desktop/RealLifeRiskR/RealLifeRiskR/shiny')
runApp('C:/Users/sebas/Desktop/RealLifeRiskR/RealLifeRiskR/shiny')
View(boardState)
which(boardState$xRes==616 & boardState$yRes==88)
sprRes
616/44
runApp('C:/Users/sebas/Desktop/RealLifeRiskR/RealLifeRiskR/shiny')
runApp('C:/Users/sebas/Desktop/RealLifeRiskR/RealLifeRiskR/shiny')
shiny::runApp('C:/Users/sebas/Desktop/RealLifeRiskR/RealLifeRiskR/shiny')
runApp('C:/Users/sebas/Desktop/RealLifeRiskR/RealLifeRiskR/shiny')
runApp('C:/Users/sebas/Desktop/RealLifeRiskR/RealLifeRiskR/shiny')
runApp('C:/Users/sebas/Desktop/RealLifeRiskR/RealLifeRiskR/shiny')
runApp('C:/Users/sebas/Desktop/RealLifeRiskR/RealLifeRiskR/shiny')
runApp('C:/Users/sebas/Desktop/RealLifeRiskR/RealLifeRiskR/shiny')
runApp('C:/Users/sebas/Desktop/RealLifeRiskR/RealLifeRiskR/shiny')
runApp('C:/Users/sebas/Desktop/RealLifeRiskR/RealLifeRiskR/shiny')
runApp('C:/Users/sebas/Desktop/RealLifeRiskR/RealLifeRiskR/shiny')
xNames
runApp('C:/Users/sebas/Desktop/RealLifeRiskR/RealLifeRiskR/shiny')
runApp('C:/Users/sebas/Desktop/RealLifeRiskR/RealLifeRiskR/shiny')
runApp('C:/Users/sebas/Desktop/RealLifeRiskR/RealLifeRiskR/shiny')
runApp('C:/Users/sebas/Desktop/RealLifeRiskR/RealLifeRiskR/shiny')
msglog
msglog$test
runApp('C:/Users/sebas/Desktop/RealLifeRiskR/RealLifeRiskR/shiny')
runApp('C:/Users/sebas/Desktop/RealLifeRiskR/RealLifeRiskR/shiny')
runApp('C:/Users/sebas/Desktop/RealLifeRiskR/RealLifeRiskR/shiny')
runApp('C:/Users/sebas/Desktop/RealLifeRiskR/RealLifeRiskR/shiny')
# Load basic packages
library(shiny)
library(shinyWidgets)
library(shinydashboard)
library(shinyjs)
library(shinyanimate)
library(png)
library(DT)
library(magick)
library(readxl)
library(raster)
library(rgeos)
source("global_reports.R")
source("global_actions.R")
source("global_other.R")
# Load key files
wd        <- getwd()
unitDef   <- data.frame(read_excel(file.path(wd,'www','Settings.xlsx'), skip=1, sheet="Units"))    # unit specification
boardDef  <- data.frame(read_excel(file.path(wd,'www','Settings.xlsx'), skip=1, sheet="Bord"))     # board specification
gameDef   <- data.frame(read_excel(file.path(wd,'www','Settings.xlsx'), skip=1, sheet="Settings")) # player specification
playerDef <- data.frame(read_excel(file.path(wd,'www','Settings.xlsx'), skip=1, sheet="Spelers"))  # add colors (in rgb) to player specification
playerDef <- cbind(playerDef,t(col2rgb(playerDef$Color)))                                          # add player color in RGB
msglog    <- list()
terrain   <- parse_terrain(boardDef)
# Basic game settings
setwd("~/GitHub/RealLifeRisk/RealLifeRiskR")
# Load basic packages
library(shiny)
library(shinyWidgets)
library(shinydashboard)
library(shinyjs)
library(shinyanimate)
library(png)
library(DT)
library(magick)
library(readxl)
library(raster)
library(rgeos)
source("global_reports.R")
source("global_actions.R")
source("global_other.R")
# Load key files
wd        <- getwd()
unitDef   <- data.frame(read_excel(file.path(wd,'www','Settings.xlsx'), skip=1, sheet="Units"))    # unit specification
boardDef  <- data.frame(read_excel(file.path(wd,'www','Settings.xlsx'), skip=1, sheet="Bord"))     # board specification
gameDef   <- data.frame(read_excel(file.path(wd,'www','Settings.xlsx'), skip=1, sheet="Settings")) # player specification
playerDef <- data.frame(read_excel(file.path(wd,'www','Settings.xlsx'), skip=1, sheet="Spelers"))  # add colors (in rgb) to player specification
playerDef <- cbind(playerDef,t(col2rgb(playerDef$Color)))                                          # add player color in RGB
msglog    <- list()
terrain   <- parse_terrain(boardDef)
# Basic game settings
# Basic game settings
for(i in 1:nrow(gameDef)){
assign(gameDef[i,1],gameDef[i,2])
}
scrnRes  <- system("wmic path Win32_VideoController get CurrentHorizontalResolution,CurrentVerticalResolution",intern=T)
scrnRes  <- as.numeric(unlist(regmatches(scrnRes, gregexpr("[[:digit:]]+", scrnRes))))
scrnResX <- ifelse(scrnResX==0,scrnRes[1],scrnResX)
scrnResY <- ifelse(scrnResY==0,scrnRes[2],scrnResY)
xNames   <- as.character(names(boardDef)[-1])                                               # names of Y axis
yNames   <- rev(as.character(boardDef[,1]))                                                 # names of X axis
uNames   <- unitDef$Unit                                                                    # unit names (abbreviated)
pNames   <- playerDef$Player                                                                # names of players (abbreviated)
scrnRes  <- c(scrnResX,scrnResY)                                                            # screen resolution
gridSize <- c(length(xNames),length(yNames))                                                # size of game board
sprRes   <- rep(floor(scrnRes[1]*0.73/gridSize[1]),2)                                       # resolution of sprites/units (scaled to match screen resolution)
sprRes   <- c(44,44)
gridRes  <- gridSize*sprRes                                                                 # resolution of gameboard
gameID   <- paste0(LETTERS[sample(1:26,1)],LETTERS[sample(1:26,1)],LETTERS[sample(1:26,1)],sample(111:999,1))
yearStart<- year
ip       <- system("ipconfig",intern=T)                                                     # get (server) IP address
ip       <- ip[grep("IPv4 Address",ip)][1]
ip       <- ifelse(is.na(ip),"unknown IP address",strsplit(ip," : ")[[1]][2])               # select (server) IP address
l        <- paste(rep('-',maxReportWidth*1.4),collapse="")                                  # used to separate report elements (*1.5 as '-' is a bit smaller than usual characters)
s        <- " // "                                                                          # used to divide information elements
b        <- '<br/>'                                                                         # used as line break (html)
newTurn  <- FALSE                                                                           # check if new turn has started
# Create initial board state
boardState <- data.frame(xPos=NA,yPos=NA,xRes=NA,yRes=NA,player=NA,unit=NA,quantity=NA)
land       <- array(rep(0,gridSize[2]*gridSize[1]*4),c(gridSize[2],gridSize[1],4))          # create land variable after function definition!
for(i in 1:nrow(playerDef)){
loc <- which(boardDef==paste0("P",i),arr.ind=T)
for(j in 1:nrow(unitDef)){
pos        <- (j-1) %% nrow(loc)+1
boardState <- create_unit(boardState,playerDef$Player[i],unitDef$Unit[j],unitDef$StartQuantity[j],xNames[loc[pos,2]],yNames[gridSize[2]-loc[pos,1]+1])
land       <- updateMapOwner(land,xNames[loc[pos,2]],yNames[gridSize[2]-loc[pos,1]+1],playerDef$Player[i])
}
}
terrain   <- parse_terrain(boardDef)
View(terrain)
terrain$city
terrain$water
